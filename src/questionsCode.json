[
    {
      "question": "¿Qué cláusula SQL indica la tabla origen de los datos?",
      "options": ["FROM", "WHERE", "SELECT", "JOIN"],
      "correct": 0,
      "explanation": "FROM especifica la(s) tabla(s) de la que se extraen los datos en la consulta."
    },
    {
      "question": "¿Cuál es la función de la cláusula WHERE?",
      "options": ["Filtrar filas antes de agrupar", "Ordenar resultados", "Seleccionar columnas", "Unir tablas"],
      "correct": 0,
      "explanation": "WHERE filtra filas según una condición antes de aplicar GROUP BY u otras operaciones."
    },
    {
      "question": "¿Para qué sirve SELECT DISTINCT?",
      "options": ["Eliminar duplicados", "Contar filas", "Modificar datos", "Crear índices"],
      "correct": 0,
      "explanation": "DISTINCT elimina filas duplicadas del conjunto de resultados."
    },
    {
      "question": "¿Cuál es la sintaxis básica para ordenar resultados en orden descendente?",
      "options": ["ORDER BY columna DESC", "SORT BY columna DESC", "ORDER columna DESC", "GROUP BY columna DESC"],
      "correct": 0,
      "explanation": "ORDER BY columna DESC ordena los resultados descendientemente por esa columna."
    },
    {
      "question": "¿Qué hace GROUP BY en SQL?",
      "options": ["Agrupa filas con mismo valor", "Filtra filas", "Ordena resultados", "Limita filas"],
      "correct": 0,
      "explanation": "GROUP BY agrupa filas que comparten valores idénticos en las columnas indicadas."
    },
    {
      "question": "¿Qué cláusula filtra grupos tras GROUP BY?",
      "options": ["HAVING", "WHERE", "ORDER BY", "LIMIT"],
      "correct": 0,
      "explanation": "HAVING aplica condiciones a grupos ya formados, mientras que WHERE filtra antes."
    },
    {
      "question": "¿Cómo se une una tabla a sí misma?",
      "options": ["SELF JOIN", "CROSS JOIN", "NATURAL JOIN", "LEFT JOIN"],
      "correct": 0,
      "explanation": "SELF JOIN une la misma tabla como si fuese otra, usando alias."
    },
    {
      "question": "¿Qué JOIN devuelve todas las filas de la tabla izquierda?",
      "options": ["LEFT JOIN", "INNER JOIN", "RIGHT JOIN", "FULL JOIN"],
      "correct": 0,
      "explanation": "LEFT JOIN incluye todas las filas de la tabla izquierda y las coincidentes de la derecha."
    },
    {
      "question": "¿Cuál es la diferencia entre INNER JOIN y LEFT JOIN?",
      "options": ["INNER solo coincidentes; LEFT incluye todas de izquierda", "LEFT solo coincidentes; INNER incluye todas", "Ninguna", "INNER agrupa; LEFT filtra"],
      "correct": 0,
      "explanation": "INNER JOIN muestra sólo filas coincidentes en ambas tablas; LEFT JOIN incluye también no coincidentes de la izquierda."
    },
    {
      "question": "¿Para qué sirve UNION en SQL?",
      "options": ["Combinar dos SELECT eliminando duplicados", "Agrupar resultados", "Ordenar filas", "Filtrar filas"],
      "correct": 0,
      "explanation": "UNION combina resultados de dos consultas SELECT y elimina duplicados."
    },
    {
      "question": "¿Cómo limitas el número de filas devueltas?",
      "options": ["LIMIT n", "TOP n", "MAX n", "FETCH n"],
      "correct": 0,
      "explanation": "LIMIT n restringe el número de filas devueltas a n (MySQL, PostgreSQL)."
    },
    {
      "question": "¿Qué comando elimina filas de una tabla?",
      "options": ["DELETE FROM tabla WHERE condición", "DROP TABLE tabla", "TRUNCATE tabla", "REMOVE FROM tabla"],
      "correct": 0,
      "explanation": "DELETE FROM tabla WHERE condición borra filas que cumplen la condición sin eliminar la tabla."
    },
    {
      "question": "¿Cuál borra toda la tabla rápidamente?",
      "options": ["TRUNCATE TABLE tabla", "DROP TABLE tabla", "DELETE TABLE tabla", "REMOVE TABLE tabla"],
      "correct": 0,
      "explanation": "TRUNCATE TABLE borra todas las filas de la tabla de forma eficiente sin eliminar su estructura."
    },
    {
      "question": "¿Cómo inserto un nuevo registro en SQL?",
      "options": ["INSERT INTO tabla (cols) VALUES (vals)", "ADD INTO tabla VALUES", "INSERT tabla VALUES", "CREATE ROW tabla"],
      "correct": 0,
      "explanation": "INSERT INTO tabla (cols) VALUES (vals) añade un nuevo registro con los valores especificados."
    },
    {
      "question": "¿Cuál es la sintaxis para actualizar datos?",
      "options": ["UPDATE tabla SET col=val WHERE condición", "MODIFY tabla SET", "CHANGE tabla", "ALTER tabla VALUES"],
      "correct": 0,
      "explanation": "UPDATE tabla SET col=val WHERE condición modifica los valores de las filas que cumplen la condición."
    },
    {
      "question": "¿Qué hace CREATE INDEX?",
      "options": ["Crea un índice para acelerar consultas", "Crea tabla nueva", "Inserta datos", "Agrupa filas"],
      "correct": 0,
      "explanation": "CREATE INDEX crea un índice en una columna para mejorar el rendimiento de búsqueda."
    },
    {
      "question": "¿Qué es una clave primaria?",
      "options": ["Identificador único de cada fila", "Índice secundario", "Tabla particionada", "Vista"],
      "correct": 0,
      "explanation": "La clave primaria garantiza unicidad e identifica de forma única cada registro."
    },
    {
      "question": "¿Para qué sirve COMMIT?",
      "options": ["Guardar transacción", "Deshacer cambios", "Iniciar transacción", "Bloquear tabla"],
      "correct": 0,
      "explanation": "COMMIT confirma todos los cambios realizados en la transacción actual."
    },
    {
      "question": "¿Cómo deshago cambios en una transacción?",
      "options": ["ROLLBACK", "UNDO", "REVERT", "ABORT"],
      "correct": 0,
      "explanation": "ROLLBACK revierte todos los cambios de la transacción actual."
    },
    {
      "question": "¿Qué son vistas en SQL?",
      "options": ["Consultas virtuales almacenadas", "Tablas temporales", "Índices", "Triggers"],
      "correct": 0,
      "explanation": "Una vista es una consulta definida y almacenada que se comporta como una tabla virtual."
    },
    {
      "question": "¿Cuál forma normal elimina grupos repetidos?",
      "options": ["Primera Forma Normal (1NF)", "Segunda Forma Normal (2NF)", "Tercera Forma Normal (3NF)", "BCNF"],
      "correct": 0,
      "explanation": "1NF requiere que cada celda contenga un único valor atómico."
    },
    {
      "question": "¿Qué normalización atiende dependencias parciales?",
      "options": ["2NF", "1NF", "3NF", "BCNF"],
      "correct": 0,
      "explanation": "2NF exige que cada atributo no clave dependa de toda la clave primaria."
    },
    {
      "question": "¿Qué normalización elimina dependencias transitivas?",
      "options": ["3NF", "1NF", "2NF", "BCNF"],
      "correct": 0,
      "explanation": "3NF requiere que no existan dependencias de atributos no clave entre sí."
    },
    {
      "question": "¿Qué comando crea una tabla nueva?",
      "options": ["CREATE TABLE", "MAKE TABLE", "NEW TABLE", "BUILD TABLE"],
      "correct": 0,
      "explanation": "CREATE TABLE define la estructura de una tabla y sus columnas."
    },
    {
      "question": "¿Cómo agrego una columna a una tabla existente?",
      "options": ["ALTER TABLE tabla ADD COLUMN col tipo", "ALTER tabla ADD col", "MODIFY TABLE ADD", "UPDATE TABLE ADD"],
      "correct": 0,
      "explanation": "ALTER TABLE tabla ADD COLUMN col tipo añade una columna nueva."
    },
    {
      "question": "¿Qué sintaxis es correcta para una subconsulta escalar?",
      "options": ["SELECT col, (SELECT MAX(col2) FROM t2) FROM t1", "SELECT col FROM (SELECT col2 FROM t2)", "SELECT col1 FROM t1 WHERE t1 IN t2", "SELECT col FROM t1 SUBQUERY"],
      "correct": 0,
      "explanation": "Una subconsulta en SELECT permite calcular un valor agregado para cada fila."
    },
    {
      "question": "¿Qué operador lógico SQL evalúa OR?",
      "options": ["Devuelve verdadero si al menos una condición es verdadera", "Solo si ambas son verdaderas", "Niega condición", "Evalúa todas iguales"],
      "correct": 0,
      "explanation": "OR devuelve verdadero cuando cualquiera de las condiciones es verdadera."
    },
    {
      "question": "¿Cuál es la sintaxis básica de una consulta MongoDB para todos los documentos?",
      "options": ["db.collection.find({})", "db.find(collection)", "db.collection.get()", "db.collection.query()"],
      "correct": 0,
      "explanation": "find({}) sin filtro devuelve todos los documentos de la colección."
    },
    {
      "question": "¿Cómo inserto un documento en MongoDB?",
      "options": ["db.collection.insertOne(doc)", "db.collection.add(doc)", "db.insert(doc)", "db.collection.save(doc)"],
      "correct": 0,
      "explanation": "insertOne() agrega un único documento a la colección."
    },
    {
      "question": "¿Qué método inserta varios documentos a la vez?",
      "options": ["insertMany()", "bulkInsert()", "addMany()", "insertAll()"],
      "correct": 0,
      "explanation": "insertMany() permite insertar un array de documentos en una operación."
    },
    {
      "question": "¿Cómo actualizo un campo en MongoDB?",
      "options": ["db.collection.updateOne(filter, { $set: { campo:valor } })", "db.collection.modify()", "db.update(filter).set()", "db.collection.set()"],
      "correct": 0,
      "explanation": "updateOne() con $set modifica el campo especificado en el documento que cumple filter."
    },
    {
      "question": "¿Para qué sirve deleteMany()?",
      "options": ["Eliminar todos los documentos que cumplan el filtro", "Eliminar un índice", "Eliminar la colección", "Limpiar datos internos"],
      "correct": 0,
      "explanation": "deleteMany(filter) borra todos los documentos que satisfacen la condición."
    },
    {
      "question": "¿Qué hace db.collection.createIndex({ campo:1 })?",
      "options": ["Crea un índice ascendente en campo", "Crea un índice descendente", "Borra índice", "Inserta registro"],
      "correct": 0,
      "explanation": "createIndex({campo:1}) crea un índice ascendente para mejorar consultas."
    },
    {
      "question": "¿Qué operador filtra en agregación?",
      "options": ["$match", "$filter", "$find", "$where"], 
      "correct": 0,
      "explanation": "$match en aggregation funciona como WHERE en SQL."
    },
    {
      "question": "¿Qué operador agrupa datos en el pipeline?",
      "options": ["$group", "$aggregate", "$sum", "$count"],
      "correct": 0,
      "explanation": "$group agrupa documentos según _id y aplica agregaciones como $sum o $avg."
    },
    {
      "question": "¿Para qué sirve $project?",
      "options": ["Incluir o excluir campos", "Agrupar datos", "Ordenar documentos", "Fusionar colecciones"],
      "correct": 0,
      "explanation": "$project devuelve sólo los campos especificados y puede crear nuevos mediante expresiones."
    },
    {
      "question": "¿Qué operador convierte un array en múltiples documentos?",
      "options": ["$unwind", "$split", "$flatten", "$expand"],
      "correct": 0,
      "explanation": "$unwind descompone cada elemento de un array en documentos separados."
    },
    {
      "question": "¿Qué etapa simula JOIN en MongoDB?",
      "options": ["$lookup", "$merge", "$join", "$link"],
      "correct": 0,
      "explanation": "$lookup permite combinar documentos de diferentes colecciones similar a JOIN."
    },
    {
      "question": "¿Cuál es la diferencia clave SQL vs MongoDB?",
      "options": ["SQL es relacional con esquema fijo; Mongo es documental sin esquema fijo", "Mongo es relacional; SQL documental", "Ambos igual", "SQL no usa índices"],
      "correct": 0,
      "explanation": "SQL usa tablas con esquema predefinido; MongoDB almacena documentos JSON/BSON sin esquema obligatorio."
    },
    {
      "question": "¿Qué modelo de consistencia suele ofrecer MongoDB?",
      "options": ["Consistencia eventual", "Consistencia fuerte", "No tiene consistencia", "Transaccional"],
      "correct": 0,
      "explanation": "MongoDB replica datos con consistencia eventual por defecto para alta disponibilidad."
    },
    {
      "question": "¿Para qué sirve db.collection.stats()?",
      "options": ["Obtener estadísticas de la colección", "Actualizar stats", "Eliminar datos", "Crear colección"],
      "correct": 0,
      "explanation": "stats() devuelve métricas como tamaño, número de documentos e índices."
    },
    {
      "question": "¿Qué comando muestra el plan de ejecución en MongoDB?",
      "options": ["explain()", "plan()", "profile()", "explainPlan()"],
      "correct": 0,
      "explanation": "db.collection.find().explain() muestra detalles del plan de consulta."
    },
    {
      "question": "¿Cómo elimino un índice en MongoDB?",
      "options": ["db.collection.dropIndex('nombre')", "db.dropIndex()", "db.collection.deleteIndex()", "db.index.drop()"],
      "correct": 0,
      "explanation": "dropIndex('nombre') borra el índice especificado de la colección."
    },
    {
      "question": "¿Qué es un sharding en MongoDB?",
      "options": ["Partición horizontal de datos", "Replica set", "Índice compuesto", "Copia de seguridad"],
      "correct": 0,
      "explanation": "El sharding distribuye datos en múltiples servidores para escala horizontal."
    },
    {
      "question": "¿Qué colección almacena archivos grandes en MongoDB?",
      "options": ["GridFS", "fs.chunks", "fs.files", "blobStorage"],
      "correct": 0,
      "explanation": "GridFS divide archivos en chunks y los guarda en fs.chunks y fs.files."
    },
    {
      "question": "¿Cuál operador filtra por existencia de campo?",
      "options": ["$exists", "$match", "$has", "$contains"],
      "correct": 0,
      "explanation": "$exists:true filtra documentos donde el campo existe."
    },
    {
      "question": "¿Qué método limita resultados en find()?",
      "options": ["limit()", "skip()", "max()", "count()"],
      "correct": 0,
      "explanation": "limit(n) restringe la cantidad de documentos devueltos."
    },
    {
      "question": "¿Cómo omito los primeros n documentos?",
      "options": ["skip(n)", "offset(n)", "drop(n)", "slice(n)"],
      "correct": 0,
      "explanation": "skip(n) ignora los primeros n documentos antes de devolver resultados."
    },
    {
      "question": "¿Qué índice es útil para consultas geoespaciales?",
      "options": ["2dsphere", "text", "hashed", "unique"],
      "correct": 0,
      "explanation": "El índice 2dsphere permite consultas basadas en geometría GeoJSON."
    },
    {
      "question": "¿Cuál es la ventaja de transacciones en MongoDB?",
      "options": ["ACID multi-documentos", "Rendimiento más alto", "Sincronización inmediata", "Elimina índices"],
      "correct": 0,
      "explanation": "Desde la versión 4.0, MongoDB soporta transacciones ACID en múltiples documentos."
    }
  ]